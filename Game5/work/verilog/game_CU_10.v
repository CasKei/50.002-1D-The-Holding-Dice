/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_10 (
    input clk,
    input rst,
    input p1rollbtn,
    input p1holdbtn,
    input p2rollbtn,
    input p2holdbtn,
    input haswinner,
    input [2:0] diceres,
    output reg [5:0] alufn,
    output reg [1:0] asel,
    output reg [1:0] bsel,
    output reg [1:0] alu_sel,
    output reg [3:0] write_a,
    output reg [3:0] read_a,
    output reg [3:0] read_b,
    output reg we
  );
  
  
  
  reg [2:0] dicer;
  
  
  localparam IDLE_game = 5'd0;
  localparam P1_TURN_game = 5'd1;
  localparam P1_ROLL_game = 5'd2;
  localparam UPDATEP1CURR_game = 5'd3;
  localparam RESET_P1CURR_game = 5'd4;
  localparam UPDATEP1ACC_game = 5'd5;
  localparam BRANCHP1CHECK_game = 5'd6;
  localparam CHKP150_game = 5'd7;
  localparam P1WIN_game = 5'd8;
  localparam P2_TURN_game = 5'd9;
  localparam P2_ROLL_game = 5'd10;
  localparam UPDATEP2CURR_game = 5'd11;
  localparam RESET_P2CURR_game = 5'd12;
  localparam UPDATEP2ACC_game = 5'd13;
  localparam BRANCHP2CHECK_game = 5'd14;
  localparam CHKP250_game = 5'd15;
  localparam P2WIN_game = 5'd16;
  
  reg [4:0] M_game_d, M_game_q = IDLE_game;
  
  always @* begin
    M_game_d = M_game_q;
    
    alufn = 6'h3f;
    asel = 1'h0;
    bsel = 1'h0;
    alu_sel = 1'h0;
    write_a = 1'h0;
    read_a = 1'h0;
    read_b = 1'h0;
    we = 1'h0;
    
    case (M_game_q)
      IDLE_game: begin
        alufn = 6'h3f;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h7;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h0;
        if (p1rollbtn || p1holdbtn) begin
          M_game_d = P1_TURN_game;
        end else begin
          if (p2rollbtn || p2holdbtn) begin
            M_game_d = P2_TURN_game;
          end else begin
            M_game_d = IDLE_game;
          end
        end
      end
      P1_TURN_game: begin
        alufn = 6'h3f;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 2'h1;
        write_a = 4'h5;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h1;
        if (p1rollbtn) begin
          M_game_d = P1_ROLL_game;
        end else begin
          if (p1holdbtn) begin
            M_game_d = UPDATEP1ACC_game;
          end else begin
            M_game_d = P1_TURN_game;
          end
        end
      end
      P2_TURN_game: begin
        alufn = 6'h3f;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 2'h2;
        write_a = 4'h5;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h1;
        if (p2rollbtn) begin
          M_game_d = P2_ROLL_game;
        end else begin
          if (p2holdbtn) begin
            M_game_d = UPDATEP2ACC_game;
          end else begin
            M_game_d = P2_TURN_game;
          end
        end
      end
      P1_ROLL_game: begin
        alufn = 6'h00;
        asel = 2'h1;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h4;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h1;
        if (diceres == 1'h1) begin
          M_game_d = RESET_P1CURR_game;
        end else begin
          if (diceres == 1'h0 || diceres == 3'h7) begin
            M_game_d = P1_ROLL_game;
          end else begin
            if (diceres == 2'h2 || diceres == 2'h3 || diceres == 3'h4 || diceres == 3'h5 || diceres == 3'h6) begin
              M_game_d = UPDATEP1CURR_game;
            end else begin
              M_game_d = IDLE_game;
            end
          end
        end
      end
      P2_ROLL_game: begin
        alufn = 6'h00;
        asel = 2'h1;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h4;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h1;
        if (diceres == 1'h1) begin
          M_game_d = RESET_P2CURR_game;
        end else begin
          if (diceres == 1'h0 || diceres == 3'h7) begin
            M_game_d = P2_ROLL_game;
          end else begin
            if (diceres == 2'h2 || diceres == 2'h3 || diceres == 3'h4 || diceres == 3'h5 || diceres == 3'h6) begin
              M_game_d = UPDATEP2CURR_game;
            end else begin
              M_game_d = IDLE_game;
            end
          end
        end
      end
      UPDATEP1CURR_game: begin
        alufn = 6'h00;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h0;
        read_a = 4'h0;
        read_b = 4'h4;
        we = 1'h1;
        M_game_d = P1_TURN_game;
      end
      UPDATEP2CURR_game: begin
        alufn = 6'h00;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h2;
        read_a = 4'h2;
        read_b = 4'h4;
        we = 1'h1;
        M_game_d = P2_TURN_game;
      end
      RESET_P1CURR_game: begin
        alufn = 6'h08;
        asel = 1'h0;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h0;
        read_a = 4'h0;
        read_b = 4'h7;
        we = 1'h1;
        M_game_d = P2_TURN_game;
      end
      RESET_P2CURR_game: begin
        alufn = 6'h08;
        asel = 1'h0;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h2;
        read_a = 4'h2;
        read_b = 4'h7;
        we = 1'h1;
        M_game_d = P1_TURN_game;
      end
      UPDATEP1ACC_game: begin
        alufn = 6'h00;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h1;
        read_a = 4'h0;
        read_b = 4'h1;
        we = 1'h1;
        M_game_d = CHKP150_game;
      end
      UPDATEP2ACC_game: begin
        alufn = 6'h00;
        asel = 1'h0;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h3;
        read_a = 4'h2;
        read_b = 4'h3;
        we = 1'h1;
        M_game_d = CHKP250_game;
      end
      CHKP150_game: begin
        alufn = 6'h37;
        asel = 2'h2;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h6;
        read_a = 4'h7;
        read_b = 4'h1;
        we = 1'h1;
        M_game_d = BRANCHP1CHECK_game;
      end
      BRANCHP1CHECK_game: begin
        alufn = 6'h08;
        asel = 1'h0;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h0;
        read_a = 4'h0;
        read_b = 4'h7;
        we = 1'h1;
        if (haswinner == 1'h0) begin
          M_game_d = P2_TURN_game;
        end else begin
          M_game_d = P1WIN_game;
        end
      end
      CHKP250_game: begin
        alufn = 6'h37;
        asel = 2'h2;
        bsel = 1'h0;
        alu_sel = 1'h0;
        write_a = 4'h6;
        read_a = 4'h7;
        read_b = 4'h3;
        we = 1'h1;
        M_game_d = BRANCHP2CHECK_game;
      end
      BRANCHP2CHECK_game: begin
        alufn = 6'h08;
        asel = 1'h0;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h2;
        read_a = 4'h2;
        read_b = 4'h7;
        we = 1'h1;
        if (haswinner == 1'h0) begin
          M_game_d = P1_TURN_game;
        end else begin
          M_game_d = P2WIN_game;
        end
      end
      P1WIN_game: begin
        alufn = 6'h08;
        asel = 2'h3;
        bsel = 2'h1;
        alu_sel = 1'h0;
        write_a = 4'h5;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h1;
        M_game_d = P1WIN_game;
      end
      P2WIN_game: begin
        alufn = 6'h08;
        asel = 2'h3;
        bsel = 2'h3;
        alu_sel = 1'h0;
        write_a = 4'h5;
        read_a = 4'h7;
        read_b = 4'h7;
        we = 1'h1;
        M_game_d = P2WIN_game;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_q <= 1'h0;
    end else begin
      M_game_q <= M_game_d;
    end
  end
  
endmodule
