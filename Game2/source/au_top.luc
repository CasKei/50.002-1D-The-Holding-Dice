module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  
  game_CU game (.clk(clk), .rst(io_button[1]));
  dice_seg seg;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    // test
    game.p1rollbtn = io_button[3];
    game.p2rollbtn = io_button[4];
    game.p1holdbtn = io_button[0];
    game.p2holdbtn = io_button[2];
    seg.char = game.currdice;
    
    io_led[0][0] = game.playerturn;
    io_led[0][7] = ~game.playerturn;
    
    io_led[1] = game.p2curr;
    
    io_led[2] = game.p1curr;
    
    io_seg = ~seg.segs;
    io_sel = ~4h1;

  }
}