module game_CU (
    input clk,  // clock
    input rst,  // reset
    
    // button inputs
    input p1rollbtn,
    input p1holdbtn,
    input p2rollbtn,
    input p2holdbtn,
    //input rstgamebtn, (maybe use rst is enough, assign in au_top)
    
    input haswinner,
    input diceres[3],
    
    // outputs
    output alufn[6],
    output asel[2],
    output bsel[2],
    output alu_sel[2],
    output write_a[4],
    output read_a[4],
    output read_b[4],
    output we
  ) {
    
    sig dicer[3];
  
  // instantiate fsm
  fsm game (.clk(clk), .rst(rst)) = {
    IDLE,
    
    P1_TURN,
    P1_ROLL,
    UPDATEP1CURR,
    RESET_P1CURR,
    UPDATEP1ACC,
    BRANCHP1CHECK,
    CHKP150,
    P1WIN,
    
    P2_TURN,
    P2_ROLL,
    UPDATEP2CURR,
    RESET_P2CURR,
    UPDATEP2ACC,
    BRANCHP2CHECK,
    CHKP250,
    P2WIN
  };
  
  always {
    // defaults
    alufn = b111111;
    asel = 0;
    bsel = 0;
    alu_sel = 0;
    write_a = 0;
    read_a = 0;
    read_b = 0;
    we = 0;

    // fsm
    case(game.q) {
   
      // IDLE
      game.IDLE:
        alufn = b111111;
        asel = 0;
        bsel = 0;
        alu_sel = 0;
        write_a = b0111;
        read_a = b0111;
        read_b = b0111;
        we = 0;
        
        if (p1rollbtn || p1holdbtn) {
          // use this to start game to P1_TURN
          // basically press any button to initiate game
          game.d = game.P1_TURN;
        } else if (p2rollbtn || p2holdbtn) {
          game.d = game.P2_TURN;
        } else {
          game.d = game.IDLE;
        }
        
      // P1_TURN (P1 can choose roll or hold, else stay in state)
      // if roll: run dice, store dice.out in st_currdice and show
      // if hold: move to UPDATEP1ACC
      // else : stay in state
      game.P1_TURN:
        alufn = b111111;
        asel = 0;
        bsel = 0;
        alu_sel = b01;
        write_a = b0101;
        read_a = b0111;
        read_b = b0111;
        we = 1;
        
        if (p1rollbtn) { // roll
          game.d = game.P1_ROLL;
        } else if (p1holdbtn) { // hold
          game.d = game.UPDATEP1ACC;
        } else {
          game.d = game.P1_TURN;
        }
        
      // P2_TURN (P2 can choose roll or hold, else stay in state)
      // if roll: run dice, store dice.out in st_currdice and show
      // if hold: move to UPDATEP2ACC
      // else : stay in state
      game.P2_TURN:
        alufn = b111111;
        asel = 0;
        bsel = 0;
        alu_sel = b10;
        write_a = b0101;
        read_a = b0111;
        read_b = b0111;
        we = 1;
        
        if (p2rollbtn) { // roll
          game.d = game.P2_ROLL;
        } else if (p2holdbtn) { // hold
          game.d = game.UPDATEP2ACC;
        } else {
          game.d = game.P2_TURN;
        }
      
      // P1_ROLL (P1 has rolled and currdice is stored and displayed)
      // if 1: move to RESET_P1CURR. other: move to UPDATEP1CURR
      game.P1_ROLL:
        alufn = b000000;
        asel = b01;
        bsel = b01;
        alu_sel = 0;
        write_a = b0100;
        read_a = b0111;
        read_b = b0111;
        we = 1;
        
        // if currdice is 1: RESET_CURRENT_P1SCORE,
        //else : P1_BRANCH_DICEROLL
        if (diceres == 1) {
          game.d = game.RESET_P1CURR;
        } else if (diceres == 0 || diceres == 7){
          // reroll
          game.d = game.P1_ROLL;
        } else if (diceres == 2||diceres == 3||diceres == 4||diceres == 5||diceres == 6){
          // rolled 2 to 6
          game.d = game.UPDATEP1CURR;
        } else {
          // final catch
          game.d = game.IDLE;
        }
      
      // P2_ROLL (P2 has rolled and currdice is stored and displayed)
      // if 1: move to RESET_P2CURR. other: move to UPDATEP2CURR
      game.P2_ROLL:
        alufn = b000000;
        asel = b01;
        bsel = b01;
        alu_sel = 0;
        write_a = b0100;
        read_a = b0111;
        read_b = b0111;
        we = 1;
        
        // if currdice is 1: RESET_CURRENT_P1SCORE,
        //else : P1_BRANCH_DICEROLL
        if (diceres == 1) {
          game.d = game.RESET_P2CURR;
        } else if (diceres == 0 || diceres == 7){
          // reroll
          game.d = game.P2_ROLL;
        } else if (diceres == 2||diceres == 3||diceres == 4||diceres == 5||diceres == 6){
          // rolled 2 to 6
          game.d = game.UPDATEP2CURR;
        } else {
          // final catch
          game.d = game.IDLE;
        }
      
      // UPDATEP1CURR (P1 has rolled and currdice is 2 to 6)
      // P1CURR = oldP1CURR + CURRDICE
      // move back to P1_TURN
      game.UPDATEP1CURR:
        alufn = b000000;
        asel = 0;
        bsel = 0;
        alu_sel = 0;
        write_a = b0000;
        read_a = b0000;
        read_b = b0100;
        we = 1;
        
        // move back to P1_TURN
        game.d = game.P1_TURN;
      
      // UPDATEP2CURR (P2 has rolled and currdice is 2 to 6)
      // P2CURR = oldP2CURR + CURRDICE
      // move back to P2_TURN
      game.UPDATEP2CURR:
        alufn = b000000;
        asel = 0;
        bsel = 0;
        alu_sel = 0;
        write_a = b0010;
        read_a = b0010;
        read_b = b0100;
        we = 1;
        
        // move back to P2_TURN
        game.d = game.P2_TURN;
      
      // RESET_P1CURR
      // P1CURR = P1CURR * ZERO
      // move to P2_TURN
      game.RESET_P1CURR:
      
        alufn = b001000;
        asel = 0;
        bsel = b01;
        alu_sel = 0;
        write_a = b0000;
        read_a = b0000;
        read_b = b0111;
        we = 1;
        
        // move to P2_TURN
        game.d = game.P2_TURN;
      
      // RESET_P2CURR
      // P2CURR = P2CURR * ZERO
      // move to P1_TURN
      game.RESET_P2CURR:
        alufn = b001000;
        asel = 0;
        bsel = b01;
        alu_sel = 0;
        write_a = b0010;
        read_a = b0010;
        read_b = b0111;
        we = 1;
        
        // move to P1_TURN
        game.d = game.P1_TURN;
      
      // UPDATEP1ACC (player chose to hold)
      // P1ACC = P1ACC + P1CURR
      // move to check if new P1ACC can win (CHKP150)
      game.UPDATEP1ACC:
        alufn = b000000;
        asel = 0;
        bsel = 0;
        alu_sel = 0;
        write_a = b0001;
        read_a = b0000;
        read_b = b0001;
        we = 1;
        
        // move to check if new P1ACC can win (CHKP150)
        game.d = game.CHKP150;
      
      // UPDATEP2ACC (player chose to hold)
      // P2ACC = P2ACC + P2CURR
      // move to check if new P2ACC can win (CHKP250)
      game.UPDATEP2ACC:
        alufn = b000000;
        asel = 0;
        bsel = 0;
        alu_sel = 0;
        write_a = b0011;
        read_a = b0010;
        read_b = b0011;
        we = 1;
      
        // move to check if new P2ACC can win (CHKP250)
        game.d = game.CHKP250;
      
      // CHKP150 (p1acc is updated, check if >= 50)
      // win = CMPLE( 50 , st_p1acc.q)
      // if win: move to P1WIN, else: move to P2_TURN
      game.CHKP150:
        alufn = b110111;
        asel = b10;
        bsel = 0;
        alu_sel = 0;
        write_a = b0110;
        read_a = b0111;
        read_b = b0001;
        we = 1;
        
        game.d = game.BRANCHP1CHECK;
        
      game.BRANCHP1CHECK:
        alufn = b001000;
        asel = 0;
        bsel = b01;
        alu_sel = 0;
        write_a = b0000;
        read_a = b0000;
        read_b = b0111;
        we = 1;

        if (haswinner == 0) {
          game.d = game.P2_TURN;
        } else {
          game.d = game.P1WIN;
        }
      
      // CHKP250 (p1acc is updated, check if >= 50)
      // win = CMPLE( 50 , st_p2acc.q)
      // if win: move to P1WIN, else: move to P2_TURN
      game.CHKP250:
        alufn = b110111;
        asel = b10;
        bsel = 0;
        alu_sel = 0;
        write_a = b0110;
        read_a = b0111;
        read_b = b0011;
        we = 1;
        
        game.d = game.BRANCHP2CHECK;
        
      game.BRANCHP2CHECK:
        alufn = b001000;
        asel = 0;
        bsel = b01;
        alu_sel = 0;
        write_a = b0010;
        read_a = b0010;
        read_b = b0111;
        we = 1;
        
        if (haswinner == 0) {
          game.d = game.P1_TURN;
        } else {
          game.d = game.P2WIN;
        }
      
      // P1WIN (st_win = 1, p1acc >= 50) freeze outputs and stop
      game.P1WIN:
        alufn = b001000;
        asel = b11;
        bsel = b01;
        alu_sel = 0;
        write_a = b0101;
        read_a = b0111;
        read_b = b0111;
        we = 1;
                
        game.d = game.P1WIN; // stay here
      
      // P2WIN (st_win = 1, p2acc >= 50) freeze outputs and stop
      game.P2WIN:
        alufn = b001000;
        asel = b11;
        bsel = b11;
        alu_sel = 0;
        write_a = b0101;
        read_a = b0111;
        read_b = b0111;
        we = 1;
                
        game.d = game.P2WIN; // stay here
      
      
      
    }
    
    
    
  }
}
