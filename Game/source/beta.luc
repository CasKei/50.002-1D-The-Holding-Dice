module beta (
    input p1_rolldicebutton,
    input p1_holdbutton,
    input p2_rolldicebutton,
    input p2_holdbutton,
    
    input clk,  // clock
    input rst,  // reset
    
    //output debug_out[8?],

    
    output decimal_counter_increase,
    output decimal_counter_rst
    
    
    // Random?
  ) {
  
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  
  alu_16 alu;
  
  .clk(clk){
    edge_detector edge_detector_diceroll (#RISE(1), #FALL(0));
    //edge_detector game_timer_detector(#RISE(1), #FALL(0)); // How do i do for 3 bits>?
    
    .rst(rst){
      game_CU game_controlunit; //Link to FSM pls
      regfile players; // ..?
      
      
      dice randoc;
      
      
    }
  }

  always {
    randoc.rollbtn = 0;
    edge_detector_diceroll.in =   randoc.out;
    
    //pass button press signal to CU unit
    game_controlunit.p1_rolldicebutton = p1_rolldicebutton;
    game_controlunit.p1_holdbutton = p1_holdbutton;
    game_controlunit.p2_rolldicebutton = p2_rolldicebutton;
    game_controlunit.p2_holdbutton = p2_holdbutton;
    
     
    
    //output of CU to increase 7segment
    decimal_counter_increase = game_controlunit.decimal_counter_increase;
    decimal_counter_rst = game_controlunit.decimal_counter_rst;
    
    
    
    //Setup REGFILE unit
    
    
    
    players.we = game_controlunit.we_regfile;
    players.write_address = game_controlunit.regfile_write_address;
    
    players.read_address_a = game_controlunit.regfile_read_address_a;
    players.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfile_datain = players.out_b; //not sure if we need
    
    
    ////////////////////
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = players.out_a;
      b01 : inputAlu_a = 0;
      b10 : inputAlu_a = 1;
      b11 : inputAlu_a = 31;
      default :
        inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b000 : inputAlu_b = players.out_b;
      b001 : inputAlu_b = 0;
      b010 : inputAlu_b = 1;
      b011 : inputAlu_b = 2;
      b100 : inputAlu_b = 3;
      b101 : inputAlu_b = 4;
      b110 : inputAlu_b = 5;
      b111 : inputAlu_b = 6;
      default:
        inputAlu_b = 0;
      
    }
    
    
    
    //ALU
    alu.a = inputAlu_a;
    alu.b = inputAlu_b;
    alu.alufn = game_controlunit.alufn;
    
    
    //wdsel mux
    case (game_controlunit.alu_out_sel){
      b01 : players.data = b1111111111111111;
      b10 : players.data = b0000000000001111;
      b11 : players.data = 0;
      default : //b00
        players.data = alu.out;
    }
    
    
    //for debugging
    //  debug_out[3:0] = players.all_buttons;
    //  debug_out[7:4] = players.out;
    //  debug_out = game_controlunit.debug;
    
 

    
    
  }
}